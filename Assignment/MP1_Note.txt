===============================================================
Part 1 Trace code
===============================================================
[B]	SC_Create

	1>	createFile.c - int main()
		- 呼叫 Create 對應 SC_Create
		- 呼叫 MSG 對應 SC_MSG

	2>	exception.cc - ExceptionHandler(..)
		- case SC_Create
		- 將 傳入字串 的位址 從Reg[4]讀出，存入 filename
		- 呼叫 SysCreate(filename)

	3>	ksyscall.h - int SysCreate(..)
		- 呼叫 kernel->fileSystem->Create(filename)
		- 注意：若有在 Makefile 中 DEFINES =  -DFILESYS_STUB 
			表示 要採用 Host OS 的檔案系統
			等同 #define FILESYS_STUB

	4>	filesys.h - bool FileSystem::Create(char)
		- 背景：因為 在 Makefile 有事先定義 FILESYS_STUB
			所以 參考 UNIX 版本的 Class FileSystem
		- 呼叫 libc 的 open(..) 去調動 Host OS 的功能
		- 呼叫 libc 的 close(..) 去調動 Host OS 的功能
		- 創建成功 return 1 / 失敗 return 0

	5>	返回 ExceptionHandler(..)
		- 將 回傳值 = 創建成功與否的狀態，存入 Reg[2]
		- 將 Program counter 指向下一道指令的位址

	6>	返回 int main()
		- 根據 Syscall 的呼叫約定，回傳值在 Reg[2]中
		- 根據 回傳值 呼叫不同的 MSG(..)

===============================================================

[C] SC_PrintInt

---------------------------------------------------------------
Note: Callback 回呼叫
1.	Def：將「函數」視為「傳遞參數」，來讓其他函式 控制、執行 傳入的函式
2.	目的：夠過同一隻手機(Interface)，請不同的員工做事(Function)
3.	用途：
	1>	統一調用「不同函數」的介面 = 使用同一個callback function，可以呼叫「不同功能的函式」
	2>	在 NachOS 中，硬體 中斷服務程式 ISR 也是由 Callback 方式來實現
		-	當硬體工作完成後，會呼叫「中斷服務程式 ISR」
			( 通常由Timer每個Tick，去檢查有沒有「待執行中斷」)
		-	而「某個硬體 的 ISR」在 NachOS 即為「class 硬體名稱」中的 CallBack()方法
		-	CallBack() 的主要工作：硬體工作完成時，通知他人可以再次存取此硬體資源
			ex. I/O 工作結束時，中斷、通知他人 
				-	class SynchConsoleOutput & class ConsoleOutput::CallBack()
			ex. Timer 設定時間到時，中斷、通知他人
				-	class Timer::CallBack()

4.	實現方式
	0>	[重要觀念] C/C++中，「函數名稱」其實代表「函數開頭位址 = 函數指標」
	1>	傳遞「函數位址」
		(1)	宣告「指向某型別函數」的指標
			int (*funcp)(void) = NULL;	// 宣告函數指標funcp
			int A(void) { printf("I'm A.");}
			funcp = A;	// 透過函數指標 指向 函式A
			funcp();	// 呼叫指標函數

		(2) 使用 typedef 宣告函數指標
			typedef int (*funcPtr)(void);
			funcPtr funcp = NULL;	// 宣告函數指標funcp
			funcp = A;	// 透過函數指標 指向 函式A
			funcp();	// 呼叫指標函數

	2>	傳遞「物件位址」
		(1)	C++ 語言：見例子
		(2) C 語言：見例子
---------------------------------------------------------------

	1>	add.c - int main()
		-	呼叫 ADD(..)
		-	呼叫 PrintInt(..)

	2>	透過	Start.S 傳遞 System Call ID 
	3>	透過	Machine::RaiseException(..) 切到 Kernel Mode，進入中斷(Trap)

	4>	exception.cc - ExceptionHandler(..)
		-	case SC_Add
			-	呼叫 SysAdd(Reg[4],Reg[5]) 直接傳回 兩者相加的值
		-	case SC_PrintInt
			-	呼叫 SysPrintInt(Reg[4])

	5>	ksyscall.h - SysPrintInt(..)
		-	呼叫 kernel->synchConsoleOut->PutInt(int)

	6-0>	synchconsole.h class SynchConsoleOutput 繼承於 class CallBackObj
		-	[觀念] 繼承於 class CallBackObj 的好處
			-	可用 單一型態的指標 = CallBackObj *toCall 來指向所有 class CallBackObj 的「子類別」
			-	方便程式的撰寫！
		-	屬性：也就是 new出來「物件的位址」
			-	ConsoleOutput *consoleOutput;	
			-	Lock *lock;
			-	Semaphore *waitFor;
		-	方法
			-	建構子：SynchConsoleOutput(char *outputFile);
				-	負責 new consoleOutput物件、lock物件、Semaphore物件
			-	void PutChar(char ch);
			-	void PutInt(int n)
			-	CallBack()
				-	背景：Override class CallBackObj 的方法 CallBack()
				-	等ConsoleOutput允許再次印出時，呼叫 CallBack()，宣布 目前自己 已不佔用 ConsoleOutput


	6-1>	synchconsole.cc - SynchConsoleOutput::PutInt(int value)
		-	呼叫 stdio.h 中的 sprintf(..) 將 value 印在字串 str[] 上
		-	請求使用 I/O Device 的權利，I/O一次一個人用，輪到自己時，鎖住 I/O 再往下執行
			-	利用lock->Acquire()鎖定物件，開始執行同步化
			-	只有取得鎖定的執行緒才可以進入同步區，未取得鎖定的執行緒則必須等待，直到有機會取得鎖定
		-	
		-	迴圈：印出 str[idx]
			-	呼叫 consoleOutput->PutChar(str[idx]) (設定putBusy = TRUE)
			-	idx++
			-	waitFor->P() = 等待 SynchConsoleOutput::CallBack() 被執行
				-	其中，硬體完成一次 PutChar(str[idx]) 後，會引發中斷，呼叫 ConsoleOutput::CallBack() 
				-	ConsoleOutput::CallBack() 會設定putBusy = FALSE 並呼叫 SynchConsoleOutput::CallBack()
				-	SynchConsoleOutput::CallBack() 會設定 waitFor->V()，令此行不再等待
				-	此時回到 PutChar(..) 才會再次工作
			-	回到第一步驟，直到印出'\0'
		-	釋放 I/O 的使用權
			-	執行完同步化後，用lock->Release()解除鎖定，讓其他物件有機會取得鎖定

	6-2>	synchconsole.cc - SynchConsoleOutput::PutChar(char ch)
		-	請求使用 I/O Device 的權利，輪到自己時鎖住 I/O 再往下執行
		-	呼叫 consoleOutput->PutChar(ch);
		-	釋放 I/O 的使用權

	7-0>	Note: class ConsoleOutput 繼承於 class CallBackObj
		-	屬性
			-	int writeFileNo;			// 一個檔案編號，用來模擬「螢幕輸出」
			-	CallBackObj *callWhenDone;	// 指向 SynchConsoleOutput物件的位址
			-	bool putBusy;				// 指示目前 ConsoleOutput 是否正在工作
		-	方法
			-	建構子：ConsoleOutput(char *writeFile, CallBackObj *toCall)
				-	建構位址：在 class SynchConsoleOutput 建構時，一起建構 class ConsoleOutput
					-	consoleOutput = new ConsoleOutput(outputFile, this);
				-	建構內容：設定 writeFileNo、callWhenDone、putBusy
					-	writeFileNo = OpenForWrite(writeFile)
					-	callWhenDone = toCall = SynchConsoleOutput物件的位址
					-	putBusy = FALSE = 目前 ConsoleOutput 不處於工作狀態
			-	void PutChar(char ch);
			-	void CallBack();
				-	背景：Override class CallBackObj 的方法 CallBack()
				-	目的：通知他人 PutChar 已結束，將 putBusy設為FALSE
			-	void PutInt(int n);


	7-1>	ConsoleOutput::PutChar(char ch)
		-	功能
			(1) 將 字元ch 印在螢幕上，並「隨即 return」
			(2) 安排「待執行中斷」於 印出完成時 引發該中斷(目的是 通知他人 PutChar 已結束)
		-	流程
			(1)	檢查 PutChar()是否正在進行中，若是，則不可再次執行
				-	若 putBusy == TRUE 則表示「忙碌中」
			(2)	呼叫 sysdep.cc - WriteFile(int fd, char *buffer, int nBytes)
				-	事實上，內部再次呼叫了 標準函數庫中的 write(..)
				-	請 Host OS 幫忙，把 nBytes 大小的字元陣列 印在「已開啟的檔案 fd」中
			(3)	安排 未來某個時間「發生中斷」
				-	呼叫 kernel->interrupt->Schedule(this, ConsoleTime, ConsoleWriteInt)
				-	即 安排「待執行中斷」且該「中斷服務程式ISR」位於 this = ConsoleOutput物件位址)中
				-	會在 在ConsoleTime時間之後，呼叫 this->CallBack();

	8>	Interrupt::Schedule(CallBackObj *toCall, int fromNow, IntType type)
		-	功能：從現在起，經過 fromNow 時間後，引發中斷，並呼叫 *toCall中的方法(函數)
		-	參數：
			-	CallBackObj *toCall  代表 中斷發生時 要呼叫的物件位址 (ex. ConsoleOutput的物件位址)
			-	int fromNow          代表 從現在起，經過「fromNow」時間後，引發中斷
			-	IntType type         代表「中斷的類型」= 引發中斷的硬體設備
		-	機制：
			(1)	計算 現在時間+fromNow = when = 應發生中斷的時刻
			(2)	並在 PendingInterrupt 的 Sorted List = pending 中
				新增「待執行中斷，發生時刻 = when時刻，中斷時呼叫 ISR = *toCall中的方法 = toCall->CallBack()」
			(3)	見 Run() - OneTick() - CheckIfDue()


	9>	mipssim.cc - Machine::Run()
		(1)	執行指令(instr) 
			-	OneInstruction(instr)
		(2)	每個Tick都 中斷一次 
			-	kernel->interrupt->OneTick()


	10>	interrupt.cc - Interrupt::OneTick()
		-	功能：
			-	時間前進 至 下一個 Tick (模擬 時間前進)
			-	確認是否有任何「待執行中斷」要執行
		-	每經過一個 Tick 的時間
		(1)	更新 totalTicks & SystemTick/UserTick
			-	stats->totalTicks 開始運作 NachOS 到現在的 Tick數
			-	stats->SystemTick/UserTick 開始運作 SystemMode/UserMode 到現在的 Tick數
		(2)	檢查是否有「待執行中斷」可以在「現在時刻」執行
			-	關閉 interrupt，此時才能執行「其他中斷服務程式ISR」
			-	呼叫 CheckIfDue(FALSE) = 檢查是否有「待執行中斷」可以執行
				-	若有，則執行「待執行中斷」= 呼叫 CallBack()，return TRUE
				-	若無，則不快轉時間，return FALSE
			-	開啟 interrupt，此時「其他中斷服務程式ISR」不能執行

		(3)	從ISR返回時，須執行Context Switch 
			-	若 timer device handler 要求執行 Context Switch (yieldOnReturn = TRUE) 
				則切到 System Mode，執行完畢後，再切回 User Mode

	11>	interrupt.cc - Interrupt::CheckIfDue(bool advanceClock)
		-	功能：檢查是否有「待執行中斷」可以在「現在時刻」執行
			-	若有，則執行「待執行中斷」= 呼叫 CallBack()，return TRUE
			-	若無，則不快轉時間，return FALSE
		-	參數：bool advanceClock 代表是否要「快轉」到下一個「待執行中斷」發生的時刻
		-	機制
			-	在所有中斷 = OFF 的情況下
			(1)	若 pending(List) = 空，reutrn FALSE
				若 pending(List) ≠ 空，訪問 最優先「待執行中斷」(next = pending->Front();)

			(2)	當 時間「還沒到」待執行中斷 發生的時間點
				-	advanceClock = FALSE 不要快轉 return FALSE
				-	advanceClock = TRUE 快轉到「待執行中斷 發生的時間點」
					(1)	更新 idleTicks = 應等待的時間 = 快轉的時間
					(2)	更新 totalTicks 為 待執行中斷 發生的時間點

			(3)	執行 待執行中斷 = Interrupt Handler = ISR (設定inHandler = TRUE)
				-	迴圈
					(1)	Pop 最優先的「待執行中斷」存入 next (next = pending->RemoveFront();)
					(2)	執行「最優先」的「待執行中斷 的 ISR(中斷服務程式)」= next->callOnInterrupt->CallBack()
						即 呼叫 *callOnInterrupt物件中的方法 = callOnInterrupt->CallBack()
						-	其中，若「待執行中斷」是來自 ConsoleOutput物件，則 ISR = ConsoleOutput::CallBack()
						-	表示 上一個字元已被印出，下一個字元可以開始列印
						-	設定 putBusy = FALSE & 呼叫上一層的 SynchConsoleOutput::CallBack()

				-	若 pending(List) ≠ 空 && pending(List)中「最優先 的 待執行中斷」到了要發生的時刻
					則回到迴圈第一步，執行該中斷，直到「沒有 待執行中斷 需要執行」

			(4)	停止執行 待執行中斷 = Interrupt Handler = ISR (設定inHandler = FALSE)
			(5)	return TRUE

	12>	console.cc - ConsoleOutput::CallBack()
		-	背景：
			-	CallBack() = 中斷服務程式(ISR)，表示 硬體工作結束時，呼叫的中斷服務
			-	對 ConsoleOutput 而言，表示 上一個字元已被印出，下一個字元可以開始列印
		-	機制：
			(1)	此時 I/O Device 已經不再忙碌 -> 設定 putBusy = FALSE
			(2)	在 stats 紀錄「寫入的Bytes數+1」
			(3)	呼叫 SynchConsoleOutput::CallBack()，執行 waitFor->V()
				-	即宣布 目前自己 已不佔用 ConsoleOutput

	13>	synchconsole.cc - SynchConsoleOutput::CallBack()
		-	waitFor->V()，即宣布 目前自己 已不佔用 ConsoleOutput
		-	回到 SynchConsoleOutput::PutInt(int value) 中的 waitFor->P() 則會放行，繼續印出


===============================================================
Part 2 Implement 4 I/O system calls in NachOS
===============================================================

0.	Hint & Reminder
	1>	Use the file operations defined in lib/sysdep.cc
	2>	Use the stub file system (在 Makefile 中設定)

	3>	函數規格參照 (依照 System Call 的邏輯)
		-	syscall.h
			(1)	System Call ID 查閱
				#define SC_Open	        6   
				#define SC_Read	        7   
				#define SC_Write	    8
				#define SC_Close	    10
			(2)	System Call Interface (已定義好函數長相了)
				OpenFileId Open(char *name);
				int Write(char *buffer, int size, OpenFileId id);
				int Read(char *buffer, int size, OpenFileId id);
				int Close(OpenFileId id);

	4>	需要撰寫的部分
		(1)		exception.cc - void ExceptionHandler(ExceptionType which)
				-	根據 Syscall ID 提供需要呼叫的 kernel服務
				-	取得 傳遞參數 from Reg[4]～Reg[7]
				-	ex. Case SC_Open: {...} 

		(2)		ksyscall.h
				-	定義新介面 
				-	ex. OpenFileId SysOpen(char *filename){...}
						呼叫 kernel->fileSystem->OpenF()

		(3)		filesys.h
				-	真正實作的地方
					-	ex. 設計 OpenFileId OpenF(char *name){...} 
				-	會用到 lib/sysdep.cc (用來呼叫一些 UNIX 的 System Call)
					extern int OpenForReadWrite(char *name, bool crashOnError);
					extern void Read(int fd, char *buffer, int nBytes);
					extern void WriteFile(int fd, char *buffer, int nBytes);
					extern int Tell(int fd);
					extern int Close(int fd);

---------------------------------------------------------------
Note：file descriptor (fd) 
-	結構
	(1)	每個 process 裡面包含 file descriptor 的 table
	(2)	File descriptor 只是個指標，指向 Openfile table 的元素(entry = Open file description)
	(3)	Openfile table 的元素，包含 3個元素：file offset、status flags、inode ptr
		-	並由 inode_ptr 再去指向 I-node table 的元素(FCB)
-	初探意義
	-	file descriptor (fd) 理解為 Process 訪問的檔案 (Process層面)
	-	Openfile table 理解為「現在開啟 的 檔案」(系統層面)
	-	I-node table 理解為「檔案本身的資訊」
---------------------------------------------------------------

1.	OpenFileId Open(char *name);
	-	Open a file with the name
	-	Returns its corresponding OpenFileId
	-	Return -1 if fail to open the file 

2.	int Write(char *buffer, int size, OpenFileId id); 	
	-	Write “size” characters from the buffer into the file
	-	Return the number of characters actually written to the file
	-	Return -1, if fail to write the file

3.	int Read(char *buffer, int size, OpenFileId id); 
	-	Read “size” characters from the file to the buffer
	-	Return the number of characters actually read from the file
	-	Return -1, if fail to read the file

4.	int Close(OpenFileId id);
	-	Close the file with id
	-	Return 1 if successfully close the file
	-	Otherwise, return -1












